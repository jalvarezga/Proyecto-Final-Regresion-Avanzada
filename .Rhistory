<<<<<<< HEAD
###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosCrudos[datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS',]
datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY'),]
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
head(datosFiltrados)
head(datosFiltrados)
tail(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat)
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin latitud
summary(datosFiltrados$Location)
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
datosFiltrados[datosFiltrados$Lat!=NA,]
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long)
summary(datosFiltrados$Long) #ya no hay datos faltantes
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Latitude
x=c(3,-1,2)
which.min(x)
Distritos$Neighborhood
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
library(sf)
library(mapview)
install.packages('mapview')
library(sf)
install.packages('mapview')
library(mapview)
datosFiltrados=c(datosFiltrados, distrito)
head(datosFiltrados)
datosFiltrados$``
datosFiltrados=c(datosFiltrados, distrito)
datosFiltrados
###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
#Filtramos datos
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin longitud
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long) #ya no hay datos faltantes
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
datosFiltrados=cbind(datosFiltrados, distrito)
datosFiltrados
head(datosFiltrados)
library(sf)
library(mapview)
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color='distrito')
datosFiltrados$Lat
datosFiltrados$Lat
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color='distrito')
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
library(mapview)
datosFiltrados$Lat
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
districts
distrito
distrito
datosFiltrados
head(datosFiltrados)
library(sf)
library(mapview)
datosFiltrados$Lat
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c("HOlA"), col.regions='blue')
#Ahora los estratificamos por distrito
levels(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
levels(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
names(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
names(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
length(unique(datosFiltrados$distrito))
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
#Filtramos datos
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin longitud
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long) #ya no hay datos faltantes
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
datosFiltrados=cbind(datosFiltrados, distrito)
datosFiltrados
head(datosFiltrados)
datosFiltrados$Lat
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c("Crimenes"), col.regions='blue')
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
length(unique(datosFiltrados$distrito))
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab')
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1]], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[2],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[2]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[3],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[3]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[5],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[5]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[6],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[6]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered')
length(colors)
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered', 'orchid', 'mediumvioletred')
length(colors)
colors=c('forestgreen', 'wheat4','darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered', 'orchid', 'mediumvioletred')
length(colors)
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
p
for(i in 2:length(unique(datosFiltrados$distrito))){
p=p+mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(districts[i]), col.regions=colors[i])
}
p
for(i in 2:length(unique(datosFiltrados$distrito))){
p=p+mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[i]), col.regions=colors[i])
}
p
length(colors)
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p
p
#y ahora agregamos
for(i in 2:length(unique(datosFiltrados$distrito))){
print(i)
p=p+mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[i],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[i]), col.regions=colors[i])
}
p
coordenadas <- read.csv("coordenadasCentrales.csv", header = TRUE, sep = ",")
# Modificación de Y_i (checar foto)
poblacionNeigh <- c(19261,55297,19890,126909,18306,47263,33489,38924,40867,5351,26659,17386,8749,30021,54161,36772,4403,32571,6619,33526)
neigNamesVcetor <- c("Allston", "Brighton", "Charlestown", "Dorchester", "Downtown", "East Boston", "Fenway", "Hyde Park", "Jamaica Plain", "Longwood", "Mattapan", "Mission Hill", "North End", "Roslindale", "Roxbury", "South Boston", "South Boston Waterfront", "South End", "West End", "West Roxbury")
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
coordenadas <- read.csv("coordenadasCentrales.csv", header = TRUE, sep = ",")
# Modificación de Y_i (checar foto)
poblacionNeigh <- c(19261,55297,19890,126909,18306,47263,33489,38924,40867,5351,26659,17386,8749,30021,54161,36772,4403,32571,6619,33526)
neigNamesVcetor <- c("Allston", "Brighton", "Charlestown", "Dorchester", "Downtown", "East Boston", "Fenway", "Hyde Park", "Jamaica Plain", "Longwood", "Mattapan", "Mission Hill", "North End", "Roslindale", "Roxbury", "South Boston", "South Boston Waterfront", "South End", "West End", "West Roxbury")
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
mVector$mVectorInicial <- as.numeric(mVector$poblacionNeigh)
=======
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=5, n.iter=10000, n.burnin=1000)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=3000, n.burnin=100)
modelo.sim$runBugsModel()
# Load necessary packages
library(R2OpenBUGS)
library(methods)
library(SemiPar)
library(maps)
library(interp)
library(gstat)
library(sp)
library(SpatialEpi)
library(maptools)
library(RColorBrewer)
library(classInt)
library(spdep)
library(rgdal)
library(rgeos)
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
#CHECAR QUE SÍ HAYA CORRIDO
source(paste0(getwd(), "/pruebasMSR.R"))
# número de registros
n<-length(vector_yi$prop)
# variable de respuesta para cada distrito
y<- vector_yi$prop
# valores de los regresiones para cada distrito asociadas a una coordenada
#x <- cbind(data_indices$indice_edades, data_indices$indice_educacion, data_indices$indice_movilidad, data_indices$indice_raza), FUN=quitarPorcentaje, MARGIN=2))
x<-cbind(data_indices$indice_edades, data_indices$indice_educacion, data_indices$indice_movilidad, data_indices$indice_raza,data_percapita$Per.Capita.Income,data_pobreza$Poverty.rate)
#coordenadas de las regiones i
s1 <- coordenadas$Longitude
s2 <- coordenadas$Latitude
# valores a predecir en el modelo en una coordenada nueva
#elegimos distrito a predecir
set.seed(123)
nAleExc <- sample(1:22, size = 2, replace = FALSE)
s1f<-s1[nAleExc]
s2f<-s2[nAleExc]
m <- 2
# Defining data of the model
data<-list("n"=n-m,"y"=y[-nAleExc],"x"=x[-nAleExc,],"s1"=s1[-nAleExc],"s2"=s2[-nAleExc],"m"=m,"s1f"=s1f,"s2f"=s2f,"predx"=x[nAleExc,])
#NOTAAA: PREDX ES EL ÍNDICE DEL NEIGHBORHOOD MÁS CERCANO DADA LA COORDENADA NUEVA(en este caso es un distrito central)
#-Defining inits-
inits<-function(){list(beta=rep(0,7),tau=1,w=rep(0,n-m),tau.w=1,phi=1,yf1=rep(0,n-m),wf=rep(0,m),yf2=rep(0,m))}
#-Selecting parameters to monitor-
parameters<-c("beta","tau","w","tau.w","phi","yf1","yf2")
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=3000, n.burnin=100)
modelo.sim$runBugsModel()
View(modelo.sim)
modelo.sim<- bugs(model.file ="C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt" ,
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=3000,
n.chains = 2,
n.burnin = 100,
n.thin = 3,
debug=T)
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=1, n.iter=50, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=2, n.iter=50, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=50, n.burnin=100)
modelo.sim$runBugsModel()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=50, n.burnin=5)
modelo.sim$runBugsModel()
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=1000,
n.chains = 2,
n.burnin = 100,
n.thin = 3,
debug=T)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=50,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=T)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=50,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=T)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=200,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=T)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=1000,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=T)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=1000,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=F)
l1 <- bugs(model.file = "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",
data = data,
parameters.to.sav = parameters,
inits = inits,
n.iter=1000,
n.chains = 2,
n.burnin = 5,
n.thin = 2,
debug=F)
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=1000, n.burnin=100)
modelo.sim$runBugsModel()
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=3, n.iter=2000, n.burnin=100)
modelo.sim$runBugsModel()
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=5, n.iter=5000, n.burnin=500)
modelo.sim$runBugsModel()
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
modelo.sim$summaryModel()
modelo.sim$resumenfunc()
x <-modelo.sim$summaryModel()
x
names(x)
modelo.sim$summModel
x <- modelo.sim$summModel
x
type(x)
class(x)
x[!grep("deviance", rownames(self$summModel)),c(1,3,7)]
x[!grep("deviance", rownames(x)),c(1,3,7)]
x
modelo.sim$summaryModel()
filtrar_filas_positivas <- function(matriz) {
submatriz <- matriz[matriz[, 3] * matriz[, 7] > 0, ]
return(submatriz)
}
filtrar_filas_positivas(x)
modelo.sim$resumenfunc()
x[!grep("deviance", rownames(self$summModel)),c(1,3,7)]
x[!grep("deviance", rownames(x)),c(1,3,7)]
z<-x[!grep("deviance", rownames(x)),c(1,3,7)]
modelo.sim$summaryModel()
class(x)
eliminar_fila_por_rownames <- function(matriz, rowname) {
fila_a_eliminar <- which(rownames(matriz) == rowname)
nueva_matriz <- matriz[-fila_a_eliminar, ]
rownames(nueva_matriz) <- rownames(nueva_matriz)[-fila_a_eliminar]
return(nueva_matriz)
}
eliminar_fila_por_rownames(x,"deviance")
seleccionar_columnas <- function(matriz) {
columnas <- c(1, 3, 7)
nueva_matriz <- matriz[, columnas]
return(nueva_matriz)
}
seleccionar_columnas(x)
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelCode1 <- "model
{
#Likelihood
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
mu[i]<-w[i]+beta[1]+beta[2]*x[i,1]+beta[3]*x[i,2]+beta[4]*x[i,3]+beta[5]*x[i,4]+beta[6]*x[i,5]+beta[7]*x[i,6]
w0[i]<-0
}
#Priors
for (j in 1:7) { beta[j] ~ dnorm(0,0.001) }
tau ~ dgamma(0.1,0.1)
w[1:n] ~ spatial.exp(w0[],s1[],s2[],tau.w,phi,1)
tau.w ~ dgamma(0.1,0.1)
phi ~ dgamma(0.1,0.1)
#Prediction 1
for (i in 1:n) { yf1[i] ~ dnorm(mu[i],tau) }
#Prediction 2
#wf[1:m] ~ spatial.pred(w0f[],s1f[],s2f[],w[])
for (i in 1:m) {
yf2[i] ~ dnorm(muf[i],tau)
muf[i]<-wf[i]+beta[1]+beta[2]*predx[i,1]+beta[3]*predx[i,2]+beta[4]*predx[i,3]+beta[5]*predx[i,4]+beta[6]*predx[i,5]+beta[7]*predx[i,6]
w0f[i]<-0
wf[i] ~ spatial.unipred(w0f[i],s1f[i],s2f[i],w[])
}
}"
modelo.sim <- bugsModel$new(data, inits, parameters, "C:/Users/salones/Documents/Proyecto-Final-Regresion-Avanzada-main/modelosTxt/modelo1.txt",n.thin=5, n.iter=5000, n.burnin=500)
modelo.sim$runBugsModel()
modelo.sim$graphConvergence(parama=5)
modelo.sim$summaryModel()
modelo.sim$dicModelfunc()
modelo.sim$resumenfunc()
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$resumenfunc()
source(paste0(getwd(), "/paqueteTecnico/claseNietoBUGS.R"))
modelo.sim$resumenfunc()
>>>>>>> 1e1ad77b03febfa5b432dc8ede5b6eb19c198dd0
