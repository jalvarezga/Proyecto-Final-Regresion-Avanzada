###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosCrudos[datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS',]
datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY'),]
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
head(datosFiltrados)
head(datosFiltrados)
tail(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat)
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin latitud
summary(datosFiltrados$Location)
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
datosFiltrados[datosFiltrados$Lat!=NA,]
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long)
summary(datosFiltrados$Long) #ya no hay datos faltantes
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Latitude
x=c(3,-1,2)
which.min(x)
Distritos$Neighborhood
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
library(sf)
library(mapview)
install.packages('mapview')
library(sf)
install.packages('mapview')
library(mapview)
datosFiltrados=c(datosFiltrados, distrito)
head(datosFiltrados)
datosFiltrados$``
datosFiltrados=c(datosFiltrados, distrito)
datosFiltrados
###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
#Filtramos datos
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin longitud
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long) #ya no hay datos faltantes
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
datosFiltrados=cbind(datosFiltrados, distrito)
datosFiltrados
head(datosFiltrados)
library(sf)
library(mapview)
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color='distrito')
datosFiltrados$Lat
datosFiltrados$Lat
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color='distrito')
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
library(mapview)
datosFiltrados$Lat
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
#lets try to stratify by district
mapview(data=datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE, color=distrito)
# Crime Mapping
qplot(Long, Lat, data= datosFiltrados, color=distrito, geom='point', xlim = c(-71.2,-70.95), ylim= c(42.22,42.4))+
theme_bw(base_size=15)+
geom_point(size = 2)+
labs(caption= "Source: Analyze Boston")
districts
distrito
distrito
datosFiltrados
head(datosFiltrados)
library(sf)
library(mapview)
datosFiltrados$Lat
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c("HOlA"), col.regions='blue')
#Ahora los estratificamos por distrito
levels(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
levels(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
names(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
names(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
length(unique(datosFiltrados$distrito))
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
###
###
datosCrudos=read.csv("crimenes2022.csv",header=TRUE)
#Filtramos datos
datosCrudos$OFFENSE_DESCRIPTION=as.factor(datosCrudos$OFFENSE_DESCRIPTION)
summary(datosCrudos$OFFENSE_DESCRIPTION)
datosFiltrados=datosCrudos[(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY ALL OTHERS')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - SIMPLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='VANDALISM')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY SHOPLIFTING')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT FROM MV - NON-ACCESSORY')|
(datosCrudos$OFFENSE_DESCRIPTION=='ASSAULT - AGGRAVATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='AUTO THEFT - MOTORCYCLE / SCOOTER')|
(datosCrudos$OFFENSE_DESCRIPTION=='FIREARM/WEAPON - FOUND OR CONFISCATED')|
(datosCrudos$OFFENSE_DESCRIPTION=='BURGLARY - RESIDENTIAL')|
(datosCrudos$OFFENSE_DESCRIPTION=='ROBBERY')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF BICYCLE')|
(datosCrudos$OFFENSE_DESCRIPTION=='LARCENY THEFT OF MV PARTS & ACCESSORIES')
,]
head(datosFiltrados)
tail(datosFiltrados)
datosFiltrados[datosFiltrados$OFFENSE_DESCRIPTION=='ROBBERY',]
summary(datosFiltrados$Lat) #hay algunos datos sin latitud
summary(datosFiltrados$Long)#hay algunos datos sin longitud
is.na(datosFiltrados$Lat)
is.na(datosFiltrados$Long)
dim(datosFiltrados)
is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat)
sum(is.na(datosFiltrados$Long)==is.na(datosFiltrados$Lat))
dim(datosFiltrados)
#los datos sin coordenada de latitud o longitud son los mismos
datosFiltrados=datosFiltrados[is.na(datosFiltrados$Long)==FALSE,]
summary(datosFiltrados$Long) #ya no hay datos faltantes
# Hacemos código de voronoi
Distritos=read.csv('coordenadasCentrales.csv')
Distritos
Distritos$Neighborhood
Distritos$Latitude
distrito=c()
for(i in 1:(dim(datosFiltrados)[1])){
distancias=rep(0,22)
for(k in 1:22){
distancias[k]=(Distritos$Latitude[k]-datosFiltrados$Lat[i])^2+(Distritos$Longitude[k]-datosFiltrados$Long[i])^2
}
indice=which.min(distancias)
distrito[i]=Distritos$Neighborhood[indice]
}
distrito
datosFiltrados=cbind(datosFiltrados, distrito)
datosFiltrados
head(datosFiltrados)
datosFiltrados$Lat
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c("Crimenes"), col.regions='blue')
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
#Ahora los estratificamos por distrito
unique(datosFiltrados$distrito)
length(unique(datosFiltrados$distrito))
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab')
mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1]], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[2],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[2]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[3],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[3]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[5],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[5]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[6],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[6]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered')
length(colors)
colors=c('forestgreen', 'darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered', 'orchid', 'mediumvioletred')
length(colors)
colors=c('forestgreen', 'wheat4','darkorchid1', 'gold', 'navy','lightgreen','orange', 'slateblue',
'magenta', 'red', 'brown', 'tan', 'olivedrab', 'dodgerblue','darksalmon' ,
'navy', 'yellow', 'slateblue','seagreen', 'orangered', 'orchid', 'mediumvioletred')
length(colors)
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[7],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[7]), col.regions=colors[1])
p
p
for(i in 2:length(unique(datosFiltrados$distrito))){
p=p+mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(districts[i]), col.regions=colors[i])
}
p
for(i in 2:length(unique(datosFiltrados$distrito))){
p=p+mapview(datosFiltrados, xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[i]), col.regions=colors[i])
}
p
length(colors)
p=mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[1],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[1]), col.regions=colors[1])
p
p
#y ahora agregamos
for(i in 2:length(unique(datosFiltrados$distrito))){
print(i)
p=p+mapview(datosFiltrados[datosFiltrados$distrito==unique(datosFiltrados$distrito)[i],], xcol = "Long", ycol = "Lat", crs = 4269, grid = FALSE,
layer.name = c(unique(datosFiltrados$distrito)[i]), col.regions=colors[i])
}
p
coordenadas <- read.csv("coordenadasCentrales.csv", header = TRUE, sep = ",")
# Modificación de Y_i (checar foto)
poblacionNeigh <- c(19261,55297,19890,126909,18306,47263,33489,38924,40867,5351,26659,17386,8749,30021,54161,36772,4403,32571,6619,33526)
neigNamesVcetor <- c("Allston", "Brighton", "Charlestown", "Dorchester", "Downtown", "East Boston", "Fenway", "Hyde Park", "Jamaica Plain", "Longwood", "Mattapan", "Mission Hill", "North End", "Roslindale", "Roxbury", "South Boston", "South Boston Waterfront", "South End", "West End", "West Roxbury")
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
coordenadas <- read.csv("coordenadasCentrales.csv", header = TRUE, sep = ",")
# Modificación de Y_i (checar foto)
poblacionNeigh <- c(19261,55297,19890,126909,18306,47263,33489,38924,40867,5351,26659,17386,8749,30021,54161,36772,4403,32571,6619,33526)
neigNamesVcetor <- c("Allston", "Brighton", "Charlestown", "Dorchester", "Downtown", "East Boston", "Fenway", "Hyde Park", "Jamaica Plain", "Longwood", "Mattapan", "Mission Hill", "North End", "Roslindale", "Roxbury", "South Boston", "South Boston Waterfront", "South End", "West End", "West Roxbury")
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
mVector <- data.frame(cbind(neigVcetor, poblacionNeigh))
mVector$mVectorInicial <- as.numeric(mVector$poblacionNeigh)
